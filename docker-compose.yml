version: '3.8'

x-common-variables: &common-variables
  NODE_ENV: development
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/streamhub?schema=public
  REDIS_URL: redis://redis:6379
  JWT_SECRET: your_jwt_secret_key_here
  CORS_ORIGIN: http://localhost:3000

services:
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:4000
        NEXT_PUBLIC_SOCKET_URL: http://localhost:4000
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:4000
    volumes:
      - ./apps/web:/app/apps/web
      - web_node_modules:/app/apps/web/node_modules
      - .next:/app/apps/web/.next
    depends_on:
      - api
    networks:
      - streamhub_network
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - "4000:4000"
    environment:
      <<: *common-variables
    volumes:
      - ./apps/api:/app/apps/api
      - api_node_modules:/app/apps/api/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamhub_network
    restart: unless-stopped

  streaming:
    image: tiangolo/nginx-rtmp
    ports:
      - "1935:1935"  # RTMP
      - "8080:8080"  # HLS
    volumes:
      - ./apps/streaming/nginx.conf:/etc/nginx/nginx.conf:ro
      - streaming_temp:/tmp/hls
    networks:
      - streamhub_network
    depends_on:
      - api
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=streamhub
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - streamhub_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - streamhub_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Development tools
  adminer:
    image: adminer
    ports:
      - "8081:8080"
    networks:
      - streamhub_network
    depends_on:
      - postgres
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander
    ports:
      - "8083:8081"
    environment:
      - REDIS_HOSTS=redis
    networks:
      - streamhub_network
    depends_on:
      - redis
    restart: unless-stopped

networks:
  streamhub_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  streaming_temp:
  web_node_modules:
  api_node_modules:
  .next: